A<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PUBG Store</title>
    <link href="https://fonts.googleapis.com/css2?family=Oxanium:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #ff5500;
            --primary-dark: #e04a00;
            --dark: #1a1a1a;
            --light: #f8f8f8;
            --gray: #333333;
            --light-gray: #444444;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Oxanium', sans-serif;
            background-color: var(--dark);
            color: var(--light);
            min-height: 100vh;
            background-image: 
                radial-gradient(circle at 25% 25%, rgba(255,85,0,0.1) 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, rgba(255,85,0,0.1) 0%, transparent 50%);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            position: relative;
        }
        
        header {
            text-align: center;
            margin-bottom: 3rem;
            position: relative;
        }
        
        .logo {
            font-size: 3rem;
            font-weight: 700;
            color: var(--primary);
            text-transform: uppercase;
            letter-spacing: 3px;
            margin-bottom: 1rem;
            text-shadow: 0 0 10px rgba(255,85,0,0.3);
        }
        
        .logo span {
            color: var(--light);
        }
        
        .subtitle {
            color: var(--light-gray);
            font-size: 1.2rem;
        }
        
        /* Кнопка настроек в правом верхнем углу */
        .admin-btn {
            position: fixed;
            top: 1.5rem;
            right: 1.5rem;
            width: 40px;
            height: 40px;
            background: var(--primary);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            z-index: 100;
            transition: all 0.3s;
            border: none;
        }
        
        .admin-btn:hover {
            background: var(--primary-dark);
            transform: rotate(90deg);
            box-shadow: 0 4px 15px rgba(0,0,0,0.4);
        }
        
        /* Модальные окна */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background: linear-gradient(145deg, #222222, #2a2a2a);
            border-radius: 12px;
            padding: 2rem;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
            border: 1px solid var(--gray);
            animation: modalFadeIn 0.3s ease-out;
            position: relative;
        }
        
        @keyframes modalFadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .modal-title {
            text-align: center;
            font-size: 1.8rem;
            margin-bottom: 1.5rem;
            color: var(--primary);
        }
        
        .close-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            color: #aaa;
            font-size: 1.5rem;
            cursor: pointer;
        }
        
        /* Формы */
        .form-group {
            margin-bottom: 1.5rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #aaa;
        }
        
        .form-group input, 
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.8rem 1rem;
            background-color: #333;
            border: 1px solid #444;
            border-radius: 6px;
            color: white;
            font-size: 1rem;
            transition: border-color 0.3s;
            font-family: 'Oxanium', sans-serif;
        }
        
        .form-group textarea {
            min-height: 100px;
            resize: vertical;
        }
        
        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .btn {
            width: 100%;
            background: linear-gradient(to right, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            padding: 0.8rem;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 0.5rem;
        }
        
        .btn:hover {
            background: linear-gradient(to right, var(--primary-dark), var(--primary));
            box-shadow: 0 5px 15px rgba(255,85,0,0.3);
        }
        
        .btn-danger {
            background: linear-gradient(to right, #f44336, #d32f2f);
        }
        
        .btn-secondary {
            background: linear-gradient(to right, #9e9e9e, #616161);
        }
        
        /* Карточки товаров */
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 2rem;
        }
        
        .product-card {
            background: linear-gradient(145deg, #222222, #2a2a2a);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 10px 20px rgba(0,0,0,0.3);
            transition: transform 0.3s, box-shadow 0.3s;
            border: 1px solid var(--gray);
            position: relative;
        }
        
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.4);
            border-color: var(--primary);
        }
        
        .product-image {
            height: 180px;
            background-color: var(--gray);
            background-size: cover;
            background-position: center;
            position: relative;
        }
        
        .product-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background-color: var(--primary);
            color: white;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }
        
        .product-content {
            padding: 1.5rem;
        }
        
        .product-title {
            font-size: 1.4rem;
            margin-bottom: 0.5rem;
            color: var(--light);
        }
        
        .product-price {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary);
            margin: 1rem 0;
        }
        
        .product-description {
            color: #aaa;
            font-size: 0.95rem;
            line-height: 1.5;
            margin-bottom: 1.5rem;
        }
        
        .buy-btn {
            display: inline-block;
            width: 100%;
            background: linear-gradient(to right, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            padding: 0.8rem;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .buy-btn:hover {
            background: linear-gradient(to right, var(--primary-dark), var(--primary));
            box-shadow: 0 5px 15px rgba(255,85,0,0.3);
        }
        
        .admin-controls {
            position: absolute;
            top: 0.5rem;
            left: 0.5rem;
            display: flex;
            gap: 0.5rem;
        }
        
        .admin-control-btn {
            width: 30px;
            height: 30px;
            background: rgba(0,0,0,0.7);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.2s;
        }
        
        .admin-control-btn:hover {
            background: var(--primary);
            transform: scale(1.1);
        }
        
        .hidden {
            display: none;
        }

        /* Стили для статуса синхронизации */
        .sync-status {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            padding: 0.8rem 1.5rem;
            border-radius: 6px;
            background-color: rgba(0,0,0,0.8);
            color: white;
            font-size: 0.9rem;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s;
            border-left: 4px solid var(--primary);
        }

        .sync-status.show {
            opacity: 1;
        }

        .sync-success {
            border-left-color: #4caf50;
        }

        .sync-error {
            border-left-color: #f44336;
        }
    </style>
</head>
<body>
    <!-- Кнопка администрирования -->
    <button class="admin-btn" id="adminButton" title="Панель администратора">⚙️</button>
    
    <!-- Статус синхронизации -->
    <div class="sync-status" id="syncStatus"></div>
    
    <!-- Модальное окно администратора -->
    <div class="modal" id="adminModal">
        <div class="modal-content">
            <button class="close-btn" id="closeAdmin">&times;</button>
            <h2 class="modal-title">Панель администратора</h2>
            
            <!-- Форма входа -->
            <div id="loginFormContainer">
                <form id="loginForm">
                    <div class="form-group">
                        <label for="adminPassword">Введите пароль администратора</label>
                        <input type="password" id="adminPassword" placeholder="••••••••" required>
                    </div>
                    <button type="submit" class="btn">Войти</button>
                </form>
            </div>
            
            <!-- Контент администратора -->
            <div id="adminPanelContent" class="hidden">
                <h3 style="color: var(--primary); margin-bottom: 1rem;">Действия:</h3>
                <button id="addProductBtn" class="btn">Добавить товар</button>
                <button id="statsBtn" class="btn btn-secondary" style="margin-top: 0.5rem;">Статистика продаж</button>
                <button id="syncBtn" class="btn" style="margin-top: 0.5rem;">Синхронизировать с GitHub</button>
            </div>
        </div>
    </div>
    
    <!-- Модальное окно добавления товара -->
    <div class="modal" id="addProductModal">
        <div class="modal-content">
            <button class="close-btn" id="closeAddProduct">&times;</button>
            <h2 class="modal-title">Добавить товар</h2>
            <form id="addProductForm">
                <div class="form-group">
                    <label for="productTitle">Название товара</label>
                    <input type="text" id="productTitle" placeholder="Аккаунт #3" required>
                </div>
                <div class="form-group">
                    <label for="productPrice">Цена (₽)</label>
                    <input type="number" id="productPrice" placeholder="100" required>
                </div>
                <div class="form-group">
                    <label for="productBadge">Бейдж</label>
                    <select id="productBadge">
                        <option value="Популярный">Популярный</option>
                        <option value="Новый">Новый</option>
                        <option value="Эксклюзив">Эксклюзив</option>
                        <option value="">Без бейджа</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="productDescription">Описание</label>
                    <textarea id="productDescription" placeholder="Описание товара..." required></textarea>
                </div>
                <div class="form-group">
                    <label for="productImage">Изображение (URL)</label>
                    <input type="text" id="productImage" placeholder="https://example.com/image.jpg">
                </div>
                <button type="submit" class="btn">Добавить товар</button>
            </form>
        </div>
    </div>
    
    <!-- Модальное окно статистики -->
    <div class="modal" id="statsModal">
        <div class="modal-content">
            <button class="close-btn" id="closeStats">&times;</button>
            <h2 class="modal-title">Статистика</h2>
            <div id="statsContent">
                <p>Всего товаров: <span id="totalProducts">0</span></p>
                <p>Средняя цена: <span id="avgPrice">0</span> ₽</p>
            </div>
        </div>
    </div>

    <!-- Основной контент магазина -->
    <div class="container">
        <header>
            <div class="logo">PUBG <span>STORE</span></div>
            <div class="subtitle">Официальный магазин игровых аккаунтов PUBG</div>
        </header>
        
        <div class="products-grid" id="productsContainer">
            <!-- Товары будут добавляться сюда динамически -->
        </div>
    </div>

    <script>
        // Конфигурация синхронизации с GitHub
        const GITHUB_CONFIG = {
            REPO: 'KOZLIKap/pubg_store_webapp', // Замените на свой репозиторий
            TOKEN: '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', // Замените на свой GitHub токен
            FILENAME: 'index.html' // Имя файла без расширения
        };
        
        // Данные магазина (хранятся только в памяти)
        let products = [
            {
                id: 1,
                title: "Аккаунт #1",
                price: 300,
                description: "Купленые RP: A11, A12, A13<br>Особенные скины и предметы<br>Уровень: 50+",
                badge: "Популярный",
                image: "https://via.placeholder.com/300x180/333333/666666?text=PUBG+Account+1"
            },
            {
                id: 2,
                title: "Аккаунт #2",
                price: 80,
                description: "В продаже!<br>Рандом аккаунт █ Олд аккаунт<br>Базовые предметы",
                badge: "Новый",
                image: "https://via.placeholder.com/300x180/333333/666666?text=PUBG+Account+2"
            }
        ];
        
        let isAdmin = false;
        
        // DOM элементы
        const adminButton = document.getElementById('adminButton');
        const adminModal = document.getElementById('adminModal');
        const closeAdmin = document.getElementById('closeAdmin');
        const loginForm = document.getElementById('loginForm');
        const loginFormContainer = document.getElementById('loginFormContainer');
        const adminPanelContent = document.getElementById('adminPanelContent');
        const addProductBtn = document.getElementById('addProductBtn');
        const addProductModal = document.getElementById('addProductModal');
        const closeAddProduct = document.getElementById('closeAddProduct');
        const addProductForm = document.getElementById('addProductForm');
        const statsBtn = document.getElementById('statsBtn');
        const statsModal = document.getElementById('statsModal');
        const closeStats = document.getElementById('closeStats');
        const productsContainer = document.getElementById('productsContainer');
        const totalProductsSpan = document.getElementById('totalProducts');
        const avgPriceSpan = document.getElementById('avgPrice');
        const syncBtn = document.getElementById('syncBtn');
        const syncStatus = document.getElementById('syncStatus');
        
        // Пароль администратора
        const ADMIN_PASSWORD = "admin123";
        
        // Инициализация магазина
        function initStore() {
            renderProducts();
            updateStats();
            
            // Попытка загрузить данные с GitHub при запуске
            loadProductsFromGitHub();
        }
        
        // Рендер товаров
        function renderProducts() {
            productsContainer.innerHTML = '';
            
            products.forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'product-card';
                productCard.dataset.id = product.id;
                
                productCard.innerHTML = `
                    <div class="product-image" style="background-image: url('${product.image || 'https://via.placeholder.com/300x180/333333/666666?text=PUBG+Account'}')">
                        ${product.badge ? `<span class="product-badge">${product.badge}</span>` : ''}
                        ${isAdmin ? `
                        <div class="admin-controls">
                            <button class="admin-control-btn delete-btn" title="Удалить">✕</button>
                            <button class="admin-control-btn edit-btn" title="Редактировать">✎</button>
                        </div>
                        ` : ''}
                    </div>
                    <div class="product-content">
                        <h3 class="product-title">${product.title}</h3>
                        <div class="product-price">${product.price} ₽</div>
                        <p class="product-description">${product.description}</p>
                        <button class="buy-btn">Купить сейчас</button>
                    </div>
                `;
                
                productsContainer.appendChild(productCard);
            });
            
            // Добавляем обработчики для кнопок удаления и редактирования
            if (isAdmin) {
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const productId = parseInt(btn.closest('.product-card').dataset.id);
                        deleteProduct(productId);
                    });
                });
                
                document.querySelectorAll('.edit-btn').forEach(btn => {
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const productId = parseInt(btn.closest('.product-card').dataset.id);
                        editProduct(productId);
                    });
                });
            }
            
            // Обработчики для кнопок покупки
            document.querySelectorAll('.buy-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const productTitle = this.closest('.product-card').querySelector('.product-title').textContent;
                    const productPrice = this.closest('.product-card').querySelector('.product-price').textContent;
                    alert(`Вы выбрали товар: ${productTitle}\nЦена: ${productPrice}`);
                });
            });
        }
        
        // Добавление товара
        function addProduct(product) {
            const newId = products.length > 0 ? Math.max(...products.map(p => p.id)) + 1 : 1;
            
            const newProduct = {
                id: newId,
                title: product.title,
                price: parseInt(product.price),
                description: product.description,
                badge: product.badge,
                image: product.image || ''
            };
            
            products.push(newProduct);
            renderProducts();
            updateStats();
            closeModal(addProductModal);
            addProductForm.reset();
        }
        
        // Удаление товара
        function deleteProduct(id) {
            if (confirm('Вы уверены, что хотите удалить этот товар?')) {
                products = products.filter(product => product.id !== id);
                renderProducts();
                updateStats();
            }
        }
        
        // Редактирование товара
        function editProduct(id) {
            const product = products.find(p => p.id === id);
            if (!product) return;
            
            // Заполняем форму редактирования
            document.getElementById('productTitle').value = product.title;
            document.getElementById('productPrice').value = product.price;
            document.getElementById('productBadge').value = product.badge || '';
            document.getElementById('productDescription').value = product.description;
            document.getElementById('productImage').value = product.image || '';
            
            // Временно меняем обработчик формы для редактирования
            const originalSubmit = addProductForm.onsubmit;
            
            addProductForm.onsubmit = function(e) {
                e.preventDefault();
                
                // Обновляем товар
                product.title = document.getElementById('productTitle').value;
                product.price = parseInt(document.getElementById('productPrice').value);
                product.badge = document.getElementById('productBadge').value || '';
                product.description = document.getElementById('productDescription').value;
                product.image = document.getElementById('productImage').value || '';
                
                renderProducts();
                updateStats();
                closeModal(addProductModal);
                addProductForm.reset();
                
                // Возвращаем оригинальный обработчик
                addProductForm.onsubmit = originalSubmit;
                
                return false;
            };
            
            openModal(addProductModal);
            document.querySelector('#addProductModal .modal-title').textContent = 'Редактировать товар';
            document.querySelector('#addProductModal .btn').textContent = 'Сохранить изменения';
        }
        
        // Обновление статистики
        function updateStats() {
            totalProductsSpan.textContent = products.length;
            
            if (products.length > 0) {
                const avgPrice = products.reduce((sum, product) => sum + product.price, 0) / products.length;
                avgPriceSpan.textContent = avgPrice.toFixed(2);
            } else {
                avgPriceSpan.textContent = '0';
            }
        }
        
        // Управление модальными окнами
        function openModal(modal) {
            modal.style.display = 'flex';
        }
        
        function closeModal(modal) {
            modal.style.display = 'none';
        }

        // Функции для работы с GitHub
        async function loadProductsFromGitHub() {
            const { REPO, TOKEN, FILENAME } = GITHUB_CONFIG;
            
            if (!REPO || !TOKEN) {
                showSyncStatus('Настройки GitHub не указаны', false);
                return;
            }
            
            try {
                showSyncStatus('Загрузка данных с GitHub...', true);
                
                const url = `https://api.github.com/repos/${REPO}/contents/${FILENAME}.json`;
                
                const response = await fetch(url, {
                    headers: {
                        'Authorization': `token ${TOKEN}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`Ошибка HTTP: ${response.status}`);
                }
                
                const data = await response.json();
                const content = atob(data.content);
                const loadedProducts = JSON.parse(content);
                
                if (Array.isArray(loadedProducts)) {
                    products = loadedProducts;
                    renderProducts();
                    updateStats();
                    showSyncStatus('Данные успешно загружены', true);
                } else {
                    throw new Error('Неверный формат данных в файле');
                }
            } catch (error) {
                console.error('Ошибка загрузки с GitHub:', error);
                showSyncStatus(`Ошибка загрузки: ${error.message}`, false);
            }
        }
        
        async function saveProductsToGitHub() {
            const { REPO, TOKEN, FILENAME } = GITHUB_CONFIG;
            
            if (!REPO || !TOKEN) {
                showSyncStatus('Настройки GitHub не указаны', false);
                return;
            }
            
            try {
                showSyncStatus('Сохранение данных на GitHub...', true);
                
                // 1. Проверяем, существует ли файл
                const fileUrl = `https://api.github.com/repos/${REPO}/contents/${FILENAME}.json`;
                let sha = null;
                
                try {
                    const checkResponse = await fetch(fileUrl, {
                        headers: {
                            'Authorization': `token ${TOKEN}`,
                            'Accept': 'application/vnd.github.v3+json'
                        }
                    });
                    
                    if (checkResponse.ok) {
                        const fileData = await checkResponse.json();
                        sha = fileData.sha;
                    }
                } catch (e) {
                    // Файл не существует, это нормально
                }
                
                // 2. Подготавливаем данные для отправки
                const content = JSON.stringify(products, null, 2);
                const contentBase64 = btoa(unescape(encodeURIComponent(content)));
                
                const body = {
                    message: `Update ${FILENAME}.json`,
                    content: contentBase64,
                    sha: sha || undefined
                };
                
                // 3. Отправляем запрос
                const response = await fetch(fileUrl, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `token ${TOKEN}`,
                        'Accept': 'application/vnd.github.v3+json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(body)
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Неизвестная ошибка');
                }
                
                showSyncStatus('Данные успешно сохранены на GitHub', true);
            } catch (error) {
                console.error('Ошибка сохранения на GitHub:', error);
                showSyncStatus(`Ошибка сохранения: ${error.message}`, false);
            }
        }
        
        function showSyncStatus(message, isSuccess) {
            syncStatus.textContent = message;
            syncStatus.className = 'sync-status';
            syncStatus.classList.add(isSuccess ? 'sync-success' : 'sync-error');
            syncStatus.classList.add('show');
            
            // Автоматически скрываем сообщение через 5 секунд
            setTimeout(() => {
                syncStatus.classList.remove('show');
            }, 5000);
        }
        
        // Обработчики событий
        adminButton.addEventListener('click', () => {
            openModal(adminModal);
        });
        
        closeAdmin.addEventListener('click', () => {
            closeModal(adminModal);
        });
        
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const password = document.getElementById('adminPassword').value;
            
            if (password === ADMIN_PASSWORD) {
                isAdmin = true;
                loginFormContainer.classList.add('hidden');
                adminPanelContent.classList.remove('hidden');
                document.getElementById('adminPassword').value = '';
                renderProducts(); // Перерисовываем товары с кнопками управления
            } else {
                alert("Неверный пароль администратора!");
                document.getElementById('adminPassword').value = '';
            }
        });
        
        addProductBtn.addEventListener('click', () => {
            document.querySelector('#addProductModal .modal-title').textContent = 'Добавить товар';
            document.querySelector('#addProductModal .btn').textContent = 'Добавить товар';
            addProductForm.reset();
            openModal(addProductModal);
        });
        
        closeAddProduct.addEventListener('click', () => {
            closeModal(addProductModal);
        });
        
        addProductForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const newProduct = {
                title: document.getElementById('productTitle').value,
                price: document.getElementById('productPrice').value,
                badge: document.getElementById('productBadge').value,
                description: document.getElementById('productDescription').value,
                image: document.getElementById('productImage').value
            };
            
            addProduct(newProduct);
        });
        
        statsBtn.addEventListener('click', () => {
            updateStats();
            openModal(statsModal);
        });
        
        closeStats.addEventListener('click', () => {
            closeModal(statsModal);
        });

        // Обработчик кнопки синхронизации
        syncBtn.addEventListener('click', async () => {
            await saveProductsToGitHub();
            await loadProductsFromGitHub();
        });
        
        // Закрытие модальных окон при клике вне контента
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeModal(modal);
                }
            });
        });
        
        // Инициализация магазина при загрузке
        document.addEventListener('DOMContentLoaded', initStore);
    </script>
</body>
</html>
